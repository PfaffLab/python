#!/usr/bin/python
#==============================================================================
# template.py
#
# Shawn Driscoll
# date
#
# Gene Expression Laboratory, Pfaff
# Salk Institute for Biological Studies
#
# This file assembles the PSI quantification of alt-splice events indexed
# with asi-build-indexG.py. the quantifcation my be from Sailfish, Kallisto
# or some other alignment/quantification method (specified at the command line) 
#==============================================================================

import sys, argparse, math, re
from os.path import isfile, expanduser

# from igraph import *
# from subprocess import Popen
# from random import gauss, random, sample
# from scipy.stats import norm
# import numpy as np
# import numpy.random as npr

# R support
# import rpy2.robjects as robjects
# r = robjects.r

#==============================================================================
# globals
#==============================================================================

HOME = expanduser("~")

#==============================================================================
# main
#==============================================================================

def main(args):

	# variables
	quant = {}
	rres = 0

	# load quantification
	if args.m=="sailfish":
		quant = parse_quant_sailfish(args.quant)
	elif args.m=="kallisto":
		quant = parse_quant_kallisto(args.quant)
	else:
		sys.stderr.write("Unknown quantification mode selected\n")
		return 1

	# now parse the index and generate output
	rres = parse_index(args.index, quant)

	return 0

#
# parses sailfish expression quantification into a dict keyed by the path ids
def parse_quant_sailfish(f):

	dquant = {}

	fin = open(f, "r")
	# skip header
	szl = fin.readline()

	for szl in fin:
		aln = szl.strip().split("\t")
		# keep the feature length, number of reads and the TPM
		dquant[aln[0]] = (aln[1], aln[4], aln[3])

	fin.close()

	return dquant


#
# parses sailfish expression quantification into a dict keyed by the path ids
def parse_quant_kallisto(f):

	dquant = {}

	fin = open(f, "r")
	# skip header
	szl = fin.readline()

	for szl in fin:
		aln = szl.strip().split("\t")
		# keep the feature length, number of reads and the TPM
		dquant[aln[0]] = (aln[1], aln[3], aln[4])

	fin.close()

	return dquant


def parse_index(f, dquant):

	szl = ""
	aln = []
	aln0 = []
	aheader = []

	fin = open(f, "r")
	# keep header
	aheader = fin.readline().strip().split("\t")
	aheader = aheader + ["tpm.A", "tpm.B", "psi"]
	print "\t".join(aheader)

	# parse the rest of the file
	for szl in fin:
		aln0 = szl.strip().split("\t")
		aln = process_event(aln0, dquant)
		print "\t".join(map(str, aln))

	fin.close()

	return 0

def process_event(erow, dquant):

	lout = list(erow)

	pid1 = erow[6]
	pid2 = erow[7]

	tpm1 = float(dquant[pid1][2])
	tpm2 = float(dquant[pid2][2])

	psi = "NA"

	# express as tpm1/(tpm1+tpm2)

	if tpm1 > 0 and tpm2 > 0:
		# return NA
		psi = tpm1/(tpm1+tpm2)
	else:
		if tpm1 > 0:
			psi = 1
		elif tpm2 > 0:
			psi = 0

	lout = lout + [tpm1, tpm2, psi]

	return lout

#==============================================================================
# entry point
#==============================================================================


parser = argparse.ArgumentParser(description="About.")
parser.add_argument('index', type=str, help="The TSV index file generated by asi-build-indexG.py")
parser.add_argument('quant', type=str, help="Input file")
parser.add_argument('-m', type=str, default="sailfish", 
	help="Quantification method [sailfish]")

args = parser.parse_args()

if __name__ == "__main__":

	try:
		sys.exit(main(args))
	except KeyboardInterrupt:
		sys.stderr.write("\nkilled it\n")

